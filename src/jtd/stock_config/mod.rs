// Code generated by jtd-codegen for Rust v0.2.1

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct StockConfigPricing {
    #[serde(rename = "thresholds")]
    pub thresholds: Vec<PriceThreshold>,
}

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct StockConfigRestock {
    #[serde(rename = "thresholds")]
    pub thresholds: Vec<StockThreshold>,
}

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct StockConfigThreading {
    #[serde(rename = "batch_size")]
    pub batch_size: u32,

    #[serde(rename = "parallelism")]
    pub parallelism: u32,
}

#[derive(Serialize, Deserialize, FromSqlRow, AsExpression, Debug, Clone, Default)]
pub struct StockConfig {
    #[serde(rename = "pricing")]
    pub pricing: StockConfigPricing,

    #[serde(rename = "restock")]
    pub restock: StockConfigRestock,

    #[serde(rename = "threading")]
    pub threading: StockConfigThreading,
}

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PriceDeviation {
    #[serde(rename = "max_price_decrease_pct")]
    pub max_price_decrease_pct: f32,

    #[serde(rename = "max_price_increase_pct")]
    pub max_price_increase_pct: f32,

    #[serde(rename = "max_steps")]
    pub max_steps: u32,

    #[serde(rename = "step_size")]
    pub step_size: f32,

    #[serde(rename = "unit_to_stock_ratio")]
    pub unit_to_stock_ratio: u32,
}

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PriceThreshold {
    #[serde(rename = "buying")]
    pub buying: PriceDeviation,

    #[serde(rename = "price_end")]
    pub price_end: u32,

    #[serde(rename = "price_start")]
    pub price_start: u32,

    #[serde(rename = "selling")]
    pub selling: PriceDeviation,
}

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct StockThreshold {
    /// The fraction (0..1) to determine if a product will be restocked when
    /// none in stock
    #[serde(rename = "chance_to_restock")]
    pub chance_to_restock: f32,

    /// This is the max amount of stock we want to have
    #[serde(rename = "max_quantity")]
    pub max_quantity: u32,

    /// The max number of items to restock, must be higher than `min_quantity`
    #[serde(rename = "max_restock")]
    pub max_restock: u32,

    /// This is the minimum amount of stock we want to have
    #[serde(rename = "min_quantity")]
    pub min_quantity: u32,

    /// The upper price boundary for this configuration
    #[serde(rename = "price_end")]
    pub price_end: u32,

    /// The lower price boundary for this configuration
    #[serde(rename = "price_start")]
    pub price_start: u32,

    /// The fraction (0..1) used as upper bounds on some RNG operations
    #[serde(rename = "randomness")]
    pub randomness: f32,
}
